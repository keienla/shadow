(function (window, document, $) {
    'use strict';

    //Variable du menu
    var $menu;
    //Pour savoir si le menu burger est activé
    var ssMenuActif = false;

    // Options par défaut
    menuBurger.defaults = {
        'largeur': '768', //Largeur de base : 768
        'nom' : 'Menu',
        'fade' : false,
        'fadeVit':400,
        'ajoutMenu':[],
        'colorBurger' : '',
        'colorLi' : '',
        'colorLiSSMenu':'',
        'bgBurger' : '',
        'bgLi' : '',
        'bgLiSSMenu':'',
        'bgUl':'',
        'bgUlSSMenu':'',
        'colorDropDown':''
    };

    function menuBurger(navigation, options) {
        // on déclare un tableau d'option
        this.options = {};
        //Si certaines options n'existent pas dans l'appel de la fonction, on les remplace par celles par défaut
        this.options = $.extend( {}, menuBurger.defaults, options);
        //Aoute la variable pour comparer la largeur de l'écran
        this.windowWidth = $(window).width();
        //Variable de la navigation
        this.navigation = navigation;
        //Lance la fonction
        this.init(menuBurger);

        //Ajoute les événements de clic
        this.event();
    }

    // fonctions public
    menuBurger.prototype = {
        getMenu: function() {
             //Si l'appel de l'id n'est pas directement dans le ul
                if(this.navigation.find('>ul >li').length){
                    //$menu prend le ul enfant et les li enfants
                    $menu = this.navigation.find('>ul > li');
                } else {
                    //Sinon $menu ne prend que les li enfants
                    $menu = this.navigation.find('> li');
                }
                //Renvoi la valeur du menu
                return $menu;
        },
        
        init: function(){
            if (this.windowWidth <= this.options.largeur) {
                //On récupère la valeur du menu pour savoir où placer les li ou bien créer le menu si il n'y a aucun déplacement à faire
                $menu = this.getMenu();
                //Si le tableau pour rajouter des objets dans le menu existe
                if(this.options.ajoutMenu.length!==0){
                    //Pour tous les élements à rajouter
                    for(var i=0; i<this.options.ajoutMenu.length;i++){

                        //////////////////////////////////////////
                        ///////// tableau deux dimensions ////////
                        ////////// 0 = insérer à la fin //////////
                        /////////// ? = position de li ///////////
                        //////////////////////////////////////////

                        //Si aucune place n'a été indiqué
                        if(this.options.ajoutMenu[i].length===1){
                            //Si la deuxième case du tableau est vide on lui attribut le numéro 0 de base donc il sera envoyé à la fin du menu
                            this.options.ajoutMenu[i].push(0);
                        }
                        //Pour tous les li des éléments à rajouter
                        this.options.ajoutMenu[i][0].each(function(){
                            //On sélectionne le premier ul en dessous, normalement qu'un
                            var ul2 = $(this).find(">ul");
                            //Si le ul n'est pas vide et donc si il existe
                            if($.trim($(this).find('> ul').text())!==''){
                                //On lui rajoute la class 'hasDropdown'
                                $(ul2).parent().addClass('hasDropdown');
                                if($(this).find('> ul li').length){
                                    //On met tous les li dedans, même ceux dans les sous-sous menus
                                    $(this).find('> ul li').appendTo($(this).find('>ul'));
                                }
                                //On ajoute la flèche pour descendre le sous-menu à l'intérieux
                                $(this).append('<span class="dropDown navigation_link_p"></span>');
                            }
                        });
                        //Si le nombre 0 est indiqué (en nombre normal ou en string)
                        if(this.options.ajoutMenu[i][1]===0){
                            //il est inséré à la fin du menu
                            this.options.ajoutMenu[i][0].insertAfter($menu.last());
                        } else if(this.options.ajoutMenu[i][1]>=1){
                            //si c'est le nombre 1 ou plus, il est inséré à la position du li correspondant
                            //this.options.ajoutMenu[i][0].insertAfter($menu.eq(this.options.ajoutMenu[i][1]));
                            this.options.ajoutMenu[i][0].insertAfter($menu.parent().find('>li:nth-child('+this.options.ajoutMenu[i][1]+')'));
                        }
                    }
                    //Si des choses ont été ajoutées au menu alors on réinitialise le menu pour que le reste du code s'applique sur ces nouveaux li
                    $menu = this.getMenu();
                }
                //pour toutes les selections
                $menu.each(function (index) {
                    //On sélectionne le premier ul en dessous, normalement qu'un
                    var ul = $menu.find(">ul");
                    //Si le ul n'est pas vide et donc si il existe
                    if($.trim($(this).find('> ul').text())!==''){
                        //On lui rajoute la class 'hasDropdown'
                        $(ul).parent().addClass('hasDropdown');
                        if($(this).find('> ul li').length){
                            //On met tous les li dedans, même ceux dans les sous-sous menus
                            $(this).find('> ul li').appendTo($(this).find('>ul'));
                        }
                        //On ajoute la flèche pour descendre le sous-menu à l'intérieux
                        $(this).append('<span class="dropDown navigation_link_p"></span>');
                    }
                });

                //Appel de la fonction pour les changements
                this.changement();

                //////////////////////////////////////////////////////////////////////////////////////
                /////////////////////////////// CHANGEMENT DE COULEURS ///////////////////////////////
                //////////////////////////////////////////////////////////////////////////////////////

                //Couleur du menuBurger
                if(this.options.colorBurger!=='transparent' && this.options.colorBurger!=='') {
                    $('.menu_burger').css('color',this.options.colorBurger);
                }
                if(this.options.bgBurger!=='transparent' && this.options.bgBurger!=='') {
                    $('.menu_burger').css('background',this.options.bgLi);
                }
                //Couleur des li principales
                if(this.options.colorLi!=='transparent' && this.options.colorLi!=='') {
                    $menu.find('a').css('color',this.options.colorLi);
                }
                if(this.options.bgLi!=='transparent' && this.options.bgLi!=='') {
                    $menu.css('background',this.options.bgLi);
                }
                //Couleurs de la nav secondaire
                if(this.options.colorLiSSMenu!=='transparent' && this.options.colorLiSSMenu!=='') {
                    $menu.find('li a').css('color',this.options.colorLiSSMenu);
                }
                //Si le bg des li du sous sous menu est transparent alors il prend la couleur des li principaux, sinon il prend la couleur indiquée
                if($menu.find('li').css('background-color')==='transparent' && (this.options.bgLiSSMenu==='transparent' || this.options.bgLiSSMenu==='')){
                    $menu.find('li').css('background',$menu.css('background-color'));
                } else if($menu.find('li').css('background-color')==='transparent' && (this.options.bgLiSSMenu==='transparent' || this.options.bgLiSSMenu==='') && this.options.bgLi!=='transparent' || this.options.bgLi!==''){
                    $menu.find('li').css('background',this.options.bgLi);
                } else if(this.options.bgLiSSMenu!=='transparent' && this.options.bgLiSSMenu!=='') {
                    $menu.find('li').css('background',this.options.bgLiSSMenu);
                }
                //Couleur des background des ul principaux et secondaires
                if(this.options.bgUl!=='transparent' && this.options.bgUl!=='') {
                    if(this.navigation.find('>ul').length){
                        this.navigation.find('>ul').css('background',this.options.bgUl);
                    }
                }
                if(this.options.bgUlSSMenu!=='transparent' && this.options.bgUlSSMenu!=='') {
                    $menu.find('ul').css('background',this.options.bgUlSSMenu);
                }
                //Couleur dropDown
                if(this.options.colorDropDown!=='transparent' && this.options.colorDropDown!=='') {
                    $menu.find('.dropDown').css('color',this.options.colorDropDown);
                }
            }
        },

        event: function() {
            //Change le nom du this car dans les event la proprité this change sinon
            var self = this;
            ///////////////////// DEPLOYER LE MENU /////////////////////
            $('body').on('click', '.menu_burger', function () {
                //Si le menu n'est pas déroulé
                if (self.navigation.hasClass('nav_fermee')) {
                    //On supprime la class 'nav_fermee'
                    self.navigation.removeClass('nav_fermee');
                    //On ajoute la class 'nav_ouverte'
                    self.navigation.addClass('nav_ouverte');
                } else {
                    //On supprime la class 'nav_ouverte'
                    self.navigation.removeClass('nav_ouverte');
                    //On ajoute la class 'nav_fermee'
                    self.navigation.addClass('nav_fermee');
                }
            });
            ///////////////////// DEROULER LES SOUS MENUS /////////////////////
            //Au click sur les flèches pour dérouler les sous-menu
            $('body').on('click', '.hasDropdown .dropDown', function(){
                //Si 'hasDropdown' est fermé
                if ($(this).parent('.hasDropdown').hasClass('sousmenu_fermer')) {
                    //pour tous les élements ayant la class 'hasDropdown'
                    $('.hasDropdown').each(function(){
                        //Si il a la class 'sousmenu_ouvert' et donc qu'ils sont ouverts
                        if($(this).hasClass('sousmenu_ouvert')){
                            //Supprime la class pour dire qu'ils sont ouverts
                            $(this).removeClass('sousmenu_ouvert');
                            //On ajoute la class pour les fermer
                            $(this).addClass('sousmenu_fermer');
                            //On display none les enfants ul
                            if(self.options.fade===true){
                                $(this).find('ul').fadeOut(self.options.fadeVit);
                            } else {
                                $(this).find('ul').css({'display':'none'});
                            }
                        }
                    });
                    //on supprime la class pour le fermer
                    $(this).parent('.hasDropdown').removeClass('sousmenu_fermer');
                    //On ajoute la class pour l'ouvrir
                    $(this).parent('.hasDropdown').addClass('sousmenu_ouvert');
                    //On le met en display block, comme cela il apparait
                    if(self.options.fade===true){
                        $(this).siblings('ul').fadeIn(self.options.fadeVit);
                    } else {
                        $(this).siblings('ul').css({'display':'block'});
                    }
                } else {
                    //Si le sous menu était ouvert on supprime la class le mettant dans cet état
                    $('.hasDropdown').removeClass('sousmenu_ouvert');
                    //On ajoute la class pour le fermer
                    $('.hasDropdown').addClass('sousmenu_fermer');
                    //On le cache grâce à un display none
                    if(self.options.fade===true){
                        $(this).siblings('ul').fadeOut(self.options.fadeVit);
                    } else {
                        $(this).siblings('ul').css({'display':'none'});
                    }
                }
            });
        },

        changement: function(){
            if (this.windowWidth <= this.options.largeur && ssMenuActif === false) {
                //Pour tous les li, on supprime la class 'listable'
                this.navigation.find('li').removeClass('listable');
                //Si le menu_burger n'existe pas
                if (!$('.menu_burger').length) {
                    //On l'insère dans la navigation
                    this.navigation.prepend('<a class="menu_burger navigation_p navigation_link_p">'+this.options.nom+'</a>');
                    //On lui rajoute la classe nav_fermee
                    this.navigation.addClass('nav_fermee');
                    //on supprime des classes
                    this.navigation.removeClass('sf-menu sf-js-enabled');
                    $('.sf-sub-indicator').css('display', 'none');
                }
                //On supprime tous les sous sous menus
                $menu.find('ul ul').remove();
                $menu.find('ul div').remove();

                //Défilement du sous-menu mobile on click
                $('.hasDropdown').addClass('sousmenu_fermer');
                $('.sousmenu_fermer').find('ul').css('display', 'none');

                ssMenuActif=true;

            } else if (this.windowWidth > this.options.largeur && ssMenuActif === true) {
                //Si la largeur de l'écran est plus grande que celle spécifiée
                //on supprime le menu_burger
                $('.menu_burger').remove();
                //On retire les class 'nav_fermee' && 'nav_ouverte'
                this.navigation.removeClass('nav_fermee nav_ouverte'); 
                //On retire la flèche descendante
                $('.dropDown').remove();
                //On retire les classe 'sousmenu_fermer' pour qu'ils puissent de nouveau être visible
                $('.hasDropdown').removeClass('sousmenu_fermer');

                this.navigation.children('ul').css('background-color', '');

                ssMenuActif=false;
            }
        },

        resize: function() {
            //Récupère la largeur de la fenêtre au resize
            this.windowWidth = $(window).width();
            //Si la résolution est en-dessous de celle demandé et que le menu burger n'est pas actif alors on le lance
            if (this.windowWidth <= this.options.largeur && ssMenuActif === false) {
                this.init();
            //Si le menu burger est actif et que l'on est au dessus de la résolution demandée alors on le supprime
            } else if (this.windowWidth > this.options.largeur && ssMenuActif === true) {
                this.changement();
            }
        }
    }

    // on déclare menuBurger
    window.menuBurger = menuBurger;

})(window, document, jQuery);


















////////////////////////////////////////// V2 \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

(function($) {
    // PLUG-IN Align Hauteur 
    $.fn.resizeBlocs = function(optionsPerso) {
        //Options par défaut
        var options = {
            'divModif' : '',                        //La div sur laquelle le changement de hauteur s'appliquera, par défaut c'est la div appelant la fonction
            'maxWidth' : $(window).width(),         //La largeur max pour effectuer le changement 
            'minWidth' : 0,                         //La largeur min pour effectuer le changement
            'ajoutHauteur': 0,                      //Si on souhaite rajouter une quantité de px à la hauteur
            'nbParLigne':0                          //Défini le nombre d'éléments par ligne (pour ajuste la hauteur en fonction des lignes, comme ça la première peut être plus haute que la deuxième sans créer de bugs)
        }
        //Si certaines options n'existent pas dans l'appel de la fonction, on les remplace par celles par défaut
        optionsPerso = $.extend(options, optionsPerso);
        //Si divModif est vide alors on le remplace par divCount
        if(options.divModif === '') {
            options.divModif=$(this);
        } else {
            options.divModif=$(options.divModif);
        }
        if($(this).length && options.divModif.length){
            //Si une largeur maximale pour l'éxécution du script est spécifiée et que l'écran est plus petite que celle-ci
            if($(window).width()<=options.maxWidth){
                //Si une largeur minimal pour l'éxécution du script est spécifiée et que l'écran est plus grande que celle-ci
                if($(window).width()>=options.minWidth){
                    //hauteur la plus haute de tous les blocs
                    var hauteurProduit=0;
                    //hauteur d'un produit
                    var hauteurUnProduit=0;
                    //
                    if(options.nbParLigne===0){
                        $(this).each(function(){
                            $(this).height('auto');
                            hauteurUnProduit=$(this).height();
                            if(hauteurUnProduit>hauteurProduit){
                                hauteurProduit=hauteurUnProduit;
                            }
                        });
                        options.divModif.height(hauteurProduit+options.ajoutHauteur);
                    } else {
                        var o = 0;
                        var tableauObjet = [];
                        $(this).each(function(){
                            tableauObjet[o]=$(this);
                            o++;
                        });
                        o=0;
                        var nb = Math.ceil(tableauObjet.length/options.nbParLigne);
                        if(nb===0){
                            nb = 1;
                        }
                        for(var i=0;i<nb;i++){
                            for(var j=o;j<(o+options.nbParLigne);j++){
                                if(j<tableauObjet.length){
                                    tableauObjet[j].height('auto');
                                    hauteurUnProduit=tableauObjet[j].height();
                                    if(hauteurUnProduit>hauteurProduit){
                                        hauteurProduit=hauteurUnProduit;
                                    }
                                }
                            }
                            for(var j=o;j<(o+options.nbParLigne);j++){
                                if(j<tableauObjet.length){
                                    tableauObjet[j].height(hauteurProduit);
                                }
                            }
                            o+=options.nbParLigne;
                            hauteurProduit=0;
                            hauteurUnProduit=0;
                        }
                    }
                }
            }
        }
        return this;
    }
})(jQuery);